name: Autocommit Github Changes
author: kassett
description: "This GitHub Action allows you to commit changes to git in a runner."

inputs:
  branch:
    description: "The branch to commit to or base branch for PR."
    required: true

  github-token:
    description: "The GitHub token used by gh CLI."
    required: true

  use-pull-request:
    description: "Create PR instead of direct commit."
    required: false
    default: "false"

  files:
    description: "Comma-separated list of files to commit. Mutually exclusive with commit-all."
    required: false
    default: ""

  commit-all:
    description: "Whether to commit all tracked changes. Mutually exclusive with files."
    required: false
    default: "false"

  commit-message:
    description: "Message to use for the commit."
    required: false
    default: "Auto-committed changes"

  pull-request-title:
    description: "Title of the PR, if applicable."
    required: false
    default: "Auto-generated PR"

  pull-request-body:
    description: "Body of the PR, if applicable."
    required: false
    default: "PR created by GitHub Actions."

  pull-request-labels:
    description: "Labels to attach to the PR."
    required: false
    default: ""

  pull-request-branch-name:
    description: "Custom name for the PR branch. Otherwise will be randomly generated from target branch."
    required: false
    default: ""

  commit-untracked-files:
    description: "Whether to include untracked files."
    required: false
    default: "false"

outputs:
  sha:
    description: "The commit made by the action."
    value: ${{ steps.commit.outputs.sha }}
  branch:
    description: "The name of the branch created for the PR."
    value: ${{ steps.commit.outputs.branch }}
  pr-number:
    description: "The number of the PR created."
    value: ${{ steps.commit.outputs.pr-number }}


runs:
  using: composite
  steps:
    - name: Install gh-commit extension
      shell: bash
      run: gh extension install kassett/gh-commit
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Run gh-commit
      id: commit
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        BRANCH: "${{ inputs.branch }}"
        MESSAGE: "${{ inputs.commit-message }}"
        USE_PR: "${{ inputs.use-pull-request }}"
        HEAD_REF: "${{ inputs.pull-request-branch-name }}"
        TITLE: "${{ inputs.pull-request-title }}"
        BODY: "${{ inputs.pull-request-body }}"
        FILES: "${{ inputs.files }}"
        UNTRACKED: "${{ inputs.commit-untracked-files }}"
        COMMIT_ALL: "${{ inputs.commit-all }}"
        LABELS: "${{ inputs.pull-request-labels }}"
      run: |
        if [[ -n "$FILES" && "$COMMIT_ALL" == "true" ]]; then
          echo "❌ Error: inputs 'files' and 'commit-all' are mutually exclusive."
          exit 1
        fi
        
        if [ -z "$MESSAGE" ] || [ "$MESSAGE" = '""' ]; then
          echo "❌ Error: input 'message' cannot be an empty string."
          exit 1
        fi
        
        ARGS="-B \"$BRANCH\" -m \"$MESSAGE\""
        
        if [[ "$USE_PR" == "true" ]]; then
          ARGS+=" -P"
          [[ -n "$HEAD_REF" ]] && ARGS+=" -H \"$HEAD_REF\""
          [[ -n "$TITLE" ]] && ARGS+=" -T \"$TITLE\""
          [[ -n "$BODY" ]] && ARGS+=" -D \"$BODY\""
        fi
        
        if [[ -n "$LABELS" ]]; then
          IF=',' read -ra LABEL_ARR <<< "$LABELS"
          for l in "${LABEL_ARR[@]}"; do
            ARGS+=" -l \"$l\""
          done
        fi
        
        if [[ "$COMMIT_ALL" == "true" ]]; then
          ARGS+=" -A"
          if [[ "$UNTRACKED" == "true" ]]; then
            ARGS+=" -U"
          fi
        elif [[ -n "$FILES" ]]; then
          IFS=$' \t,' read -ra FILE_ARR <<< "$FILES"
          for f in "${FILE_ARR[@]}"; do
            ARGS+=" \"$f\""
          done
        fi

        eval gh commit $ARGS